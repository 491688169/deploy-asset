#!/usr/bin/env node

var yargs = require('yargs-cn');
var options = require('./da-options');
var ylog = require('ylog');
var fs = require('fs-extra');
var path = require('path');
var EOL = require('os').EOL;
var _ = require('lodash');
var jsonfy = require('jsonfy');
var tw = require('tty-wrap');
var pb = require('pretty-bytes');
var da = require('..');
var chalk = tw.chalk;

ylog.levelFlag('silly', -Infinity, chalk.bold.gray('[S]'));
ylog.levelFlag('verbose', 1000, chalk.bold.blue('[V]'));
ylog.levelFlag('debug', 2000, chalk.bold.magenta('[D]'));
ylog.levelFlag('info', 3000, chalk.bold.cyan('[I]'));
ylog.levelFlag('ok', 4000, chalk.bold.green(' '));
ylog.levelFlag('warn', 5000, chalk.bold.yellow('[!]'));
ylog.levelFlag('error', 6000, chalk.bold.red('[X]'));
ylog.levelFlag('fatal', 7000, chalk.bold.red('XXX'));

var argv = require('./da-completion')(yargs)
// var argv = yargs
  .version(require('../package.json').version).alias('v', 'version')
  .usage('$0 [选项] [文件_或_目录]')
  // .example('$0 count -f foo.js', '# count the lines in the given file')
  // .example('$0 count', '# count the lines in the given file')
  // .example('$0 count -f foo.js', '# count the lines in the given file')
  .options(options)
  .strict()
  .implies({
    outSuccess: 'outDir'
  })
  .help('help').alias('h', 'help')
  .showHelpOnFail(false, '请使用 --help 查看可用的选项')
  // .epilog('for more information, find our manual at http://example.com')
  .argv;



var cwd = process.cwd();
var rcDaOpts = require('rc')('da'); // 文件中的所有配置
var cliDaOpts = {}; // 命令行上的所有配置
var rawArgv = process.argv.slice(2);
var groupOpts = {
  noRootHtml: {
    absolutePatterns: ['*.html'],
    noUploadPatterns: ['*.html'],
    outDir: 'out'
  },
  noAllHtml: {
    absolutePatterns: ['**/*.html'],
    noUploadPatterns: ['**/*.html'],
    outDir: 'out'
  }
};

// 从命令行上获取配置
Object.keys(options).forEach(function (k) {
  if (k.indexOf('  ') === 0) return false;
  var v = argv[k];
  var opt = options[k];
  var t = opt.type;
  var isPatterns = /Patterns$/.test(k);

  if ((k in argv) && typeof v !== 'undefined') {
    if (t === 'string' && Array.isArray(v)) {
      cliDaOpts[k] = v[v.length - 1];
    } else if (t === 'array' && isPatterns) { // 没有作用，如果没传值，不会得到空数组
      cliDaOpts[k] = v.length === 0 ? true : v;
    } else {
      cliDaOpts[k] = v;
    }
  } else if (isPatterns && keysExistInCLI([k].concat(opt.alias || []))) {
    // 如果只传了一个 --nins，则此时 argv.noInspectPatterns 还是 undefined, 应该是 true
    cliDaOpts[k] = true;
  }
});


var cliUploaderOpts = cliDaOpts.uploaderOpts || {};
if (typeof cliUploaderOpts === 'string') {
  try {
    cliUploaderOpts = jsonfy(cliUploaderOpts);
  } catch (e) {}
  cliDaOpts.uploaderOpts = cliUploaderOpts;
}
if (typeof cliUploaderOpts !== 'object') {
  ylog.error('~uploaderOpts~ 参数配置错误，配置项需要支持解析成 JSON');
  throw new Error('CONFIG_ERROR');
}

Object.keys(groupOpts).forEach(function (key) {
  var opts = groupOpts[key];
  if (argv[key]) {
    Object.keys(opts).forEach(function (optKey) {
      if (!cliDaOpts[optKey]) cliDaOpts[optKey] = opts[optKey];
    });
  }
  delete options[key];
});


// 处理日志级别
var levels = options.logLevel.choices;
levels.forEach(function (l) {
  if (cliDaOpts[l]) cliDaOpts.logLevel = l;
  delete cliDaOpts[l];
});
if (cliDaOpts.detail && 4 + cliDaOpts.detail < levels.length) {
  cliDaOpts.logLevel = levels[4 + cliDaOpts.detail];
  delete cliDaOpts.detail;
}
ylog.setLevel(cliDaOpts.logLevel);

// 从 .darc 文件中获取配置
var rcConfigs = rcDaOpts.configs || [];
if (rcConfigs.length) {
  rcConfigs.forEach(function (c) {
    ylog.info('找到配置文件 ^%s^ ，写入当前环境', c);
  });
  delete rcDaOpts.configs;
  delete rcDaOpts.config;
  if (rcConfigs.length > 1) ylog.silly('从 !%d! 个配置文件中合并后的配置是：', rcConfigs.length, rcDaOpts);
  else ylog.silly('从配置文件中得到的配置是：', rcDaOpts);
}


// 合并命令行和 .darc 文件的配置
var uploader = keysExistInCLI(['uploader', 'u']) ? cliDaOpts.uploader : rcDaOpts.uploader,
  rcUploaderOpts,
  rcUploaderDaOpts;
if (!uploader) {
  ylog.error('请指定上传器名称');
  throw Error('NO_UPLOADER');
}


rcUploaderOpts = rcDaOpts.uploaders && rcDaOpts.uploaders[uploader] || rcDaOpts.uploaderOpts || {};
rcUploaderDaOpts = rcUploaderOpts.options || {};

delete rcDaOpts.uploaders;
delete rcUploaderOpts.options;
_.assign(rcDaOpts, rcUploaderDaOpts);
cliUploaderOpts = _.assign(rcUploaderOpts, cliUploaderOpts);

Object.keys(options).forEach(function (key) {
  var opt = options[key] || {};
  var keys = opt.alias ? [].concat(opt.alias, key) : [key];

  // 合并配置文件和命令行上的选项
  if (['minHtml', 'minCss', 'minImage', 'minJs', 'minJson'].indexOf(key) >= 0) {
    if (key in cliDaOpts && cliDaOpts[key] === false) cliDaOpts[key] = false;
    else if (!(key in cliDaOpts) && rcDaOpts[key] === false) cliDaOpts[key] = false;
    else cliDaOpts[key] = _.assign({}, rcDaOpts[key], cliDaOpts[key]);

    // 如果配置文件中有指定，但命令行上没有指定，则使用配置文件中的
  } else if ((key in rcDaOpts) && !keysExistInCLI(keys)) {
    cliDaOpts[key] = rcDaOpts[key];
  }
});


// 处理 suffix
if (cliDaOpts.suffix && typeof cliDaOpts.suffix !== 'string') {
  var suffix = cliDaOpts.suffix;
  var before = suffix.before || '';
  var after = suffix.after || '';
  var version = suffix.version === true ? '-V' : (suffix.version || '');
  var date = suffix.date === true ? '-YYYY-MM-DD' : (suffix.date || '');

  if (version) {
    var versionFile = require('look-up')('package.json');
    if (!versionFile) {
      ylog.error('没有找到 package.json 文件，无法获取版本号');
      throw new Error('NO_PACKAGE_FILE');
    }
    version = version.replace('V', require(path.resolve(versionFile)).version);
  }
  if (date) {
    date = require('moment')().format(date);
  }
  cliDaOpts.suffix = before + version + date + after;
}


var daOpts = cliDaOpts;
daOpts.uploaderName = daOpts.uploader;
delete daOpts.uploader;
daOpts.uploaderOpts = cliUploaderOpts;
if (cliUploaderOpts.alias) daOpts.uploaderName = cliUploaderOpts.alias;

if (rcConfigs.length) ylog.verbose('配置文件和命令行两者合并后的选项：', daOpts);
else ylog.verbose('命令行上的选项：', daOpts);


da(argv._.length ? argv._ : (daOpts.rootDir ? daOpts.rootDir : cwd), daOpts, function (err, files, opts) {
  if (err) {
    var errorMessage = err.message;
    var errorCn = require('./da-errors')[errorMessage];

    errorMessage += errorCn ? '   ' + errorCn : '';
    if (opts.stack) errorMessage += '\r\n' + err.stack;
    ylog.color('red').fatal(errorMessage);

  } else if (files.length) {

    // 只执行 init， 数据量太少，输不出表格
    if (opts.runToStep === 'init') return true;

    var data = [],
      sortMap = {html: 1, js: 2, css: 3, json: 4};

    files.sort(function (a, b) {
      return (sortMap[a.type] || 5) - (sortMap[b.type] || 5);
    }).forEach(function (f) {
      data.push(genFileTableRow(f, opts));
    });

    if (opts.result) {
      console.log(EOL);
      tw.table(
        data,
        {
          left: 4,
          right: 10,
          console: true,

          showHead: true
        },
        {
          head: {
            color: 'bold',
            paddingBottom: 1
          },
          colB: { align: 'center' },
          colC: { align: 'center' },
          cellAD: { align: 'center' },
          colD: { align: 'right' },
          colE: { align: 'center' }
        }
      );
      console.log(EOL);
    }


    if (opts.outDir) {
      fs.ensureDirSync(opts.outDir);
      files.forEach(function (f) {
        writeToLocal(f, opts);
      });
      console.log(EOL);
    }

    // 生成资源的 map 信息
    if (opts.map) writeMap(files, opts);
  }
});



function keysExistInCLI(keys) {
  return _.any(keys, function (k) {
    k = k.length > 1 ? '--' + k : '-' + k;
    return _.any(rawArgv, function (arg) {
      return arg === k || arg.indexOf(k + '.') === 0;
    });
  });
}

var isWin = require('os').platform() === 'win32';
var RIGHT = chalk.green(isWin ? 'OK' : '✔');
var GRAY = chalk.gray(isWin ? 'NO' : '✘');
/**
 *
 * @param {File} file
 * @param {DAOpts} opts
 */
function genFileTableRow(file, opts) {
  var row = {};
  var apply = file.apply, min = file.min, s = file.status;
  var size, rate = '';
  if (min) {
    size = pb(min.minifiedSize);
    rate = min.rate;
    if (rate > 50) rate = chalk.red(rate + '%');
    else if (rate > 10) rate = chalk.yellow(rate + '%');
    else rate = chalk.gray(' ' + rate + '%');
  } else {
    size = pb(file.contentString.length);
    rate = GRAY;
  }

  row['本地路径'] = file.relativePath;
  row['资源检查'] = apply.inspect ? RIGHT : GRAY;
  row['绝对引用'] = apply.absolute ? RIGHT : GRAY;
  row['压缩'] = size + ' ' + rate;
  row['上传结果'] = !apply.upload ? GRAY : s.success ? RIGHT :
    chalk.red(s.conflict ? '冲突' : s.exists ? '已存在' :
      s.uploaded === null ? '未上传' : s.uploaded ? '未知' : '上传失败');
  row['远程路径'] = s.success ? file.remote.url : chalk.gray('（没有上传）');
  return row;
}

/**
 *
 * @param {File} file
 * @param {DAOpts} opts
 */
function writeToLocal(file, opts) {
  if (
    opts.outSuccess && file.status.success
    || opts.outError && !file.status.success
    || file.shouldSave()
  ) {
    var dir = path.join(opts.rootDir, opts.outDir, file.remote.relative);
    var fp = path.join(dir, file.remote.basename);
    fs.ensureDirSync(dir);
    fs.writeFileSync(fp, file.remote.content);
    ylog.ok.no.tag.pad(4).writeOk('成功将 ^%s^ 文件的远程文件内容写入到 ^%s^ 文件', file.relativePath, fp);
  }
}


function writeMap(files, opts) {

  var map = opts.map;
  var mapType = typeof opts.map !== 'object' ? 'all' : opts.map.local ? 'local' : 'remote';
  var mapData, mapFile;

  if (typeof map !== 'object') {
    mapType = 'all';
    mapData = {};
    mapFile = typeof map === 'string' && map ? map : 'da-map.json';
  } else {
    mapType = map.local ? 'local' : 'remote';
    mapData = [];
    map = map[mapType];
    mapFile = typeof map === 'string' && map ? map : 'da-map-' + mapType + '.json';
  }

  files.forEach(function (f) {
    if (f.status.success) {
      var relativePath = f.relativePath.replace(/\\/g, '/');
      if (mapType === 'all') {
        mapData[relativePath] = f.remote.url;
      } else {
        mapData.push(mapType === 'local' ? relativePath : f.remote.url);
      }
    }
  });

  mapFile = path.join(cwd, mapFile);
  fs.ensureDirSync(path.dirname(mapFile));
  fs.writeFileSync(mapFile, JSON.stringify(mapData, null, 4));
  ylog.ok.no.tag.pad(4).writeOk('成功生成资源映射文件 ^%s^', mapFile);
  console.log();

}

